// Danh s√°ch s·∫£n ph·∫©m + filter theo th∆∞∆°ng hi·ªáu + sort + "Xem th√™m"

import { useState } from "react";
// Hook useState ƒë·ªÉ qu·∫£n l√Ω tr·∫°ng th√°i (brand ƒëang ch·ªçn, s·ªë s·∫£n ph·∫©m hi·ªÉn th·ªã, ki·ªÉu sort)

import { productsByBrand } from "../../data/products";
// Import d·ªØ li·ªáu s·∫£n ph·∫©m ƒë∆∞·ª£c chia theo brand (canon, sony,...)

import CardProduct from "../common/CardProduct";
// Component card s·∫£n ph·∫©m

import Button from "../common/Button";
// N√∫t t√°i s·ª≠ d·ª•ng (primary = xanh l√°, secondary = x√°m)

import SortOptions from "../common/SortOptions";
// Component dropdown s·∫Øp x·∫øp s·∫£n ph·∫©m

import SectionTitle from "../common/SectionTitle";
// Component ti√™u ƒë·ªÅ section (hi·ªÉn th·ªã ·ªü gi·ªØa, ch·ªØ to)

export default function ProductList() {
  // Tr·∫°ng th√°i: brand ƒëang ch·ªçn
  const [selectedBrand, setSelectedBrand] = useState("all");

  // Tr·∫°ng th√°i: s·ªë s·∫£n ph·∫©m hi·ªÉn th·ªã
  const [visibleCount, setVisibleCount] = useState(6);

  // Tr·∫°ng th√°i: ki·ªÉu sort
  const [sortBy, setSortBy] = useState("default");

  // Gom to√†n b·ªô s·∫£n ph·∫©m t·ª´ nhi·ªÅu brand th√†nh 1 m·∫£ng
  const allProducts = Object.values(productsByBrand).flat();

  // N·∫øu ch·ªçn "all" ‚Üí hi·ªÉn th·ªã t·∫•t c·∫£, ng∆∞·ª£c l·∫°i ch·ªâ hi·ªÉn th·ªã brand ƒëang ch·ªçn
  let filteredProducts =
    selectedBrand === "all"
      ? allProducts
      : productsByBrand[selectedBrand] || [];

  // √Åp d·ª•ng sort (d·ª±a tr√™n state sortBy)
  filteredProducts = [...filteredProducts].sort((a, b) => {
    if (sortBy === "priceLow") return a.price - b.price; // gi√° th·∫•p ‚Üí cao
    if (sortBy === "priceHigh") return b.price - a.price; // gi√° cao ‚Üí th·∫•p
    if (sortBy === "bestSelling") {
      // üöß hi·ªán t·∫°i sort random, sau n√†y backend tr·∫£ v·ªÅ d·ªØ li·ªáu "bestSelling"
      return Math.random() - 0.5;
    }
    return 0; // gi·ªØ nguy√™n (m·∫∑c ƒë·ªãnh)
  });

  return (
    <section className="py-12 bg-gray-50" id="products">
      {/* Ti√™u ƒë·ªÅ section */}
      <SectionTitle>Danh s√°ch s·∫£n ph·∫©m</SectionTitle>

      {/* N√∫t ch·ªçn th∆∞∆°ng hi·ªáu */}
      <div className="flex justify-center gap-4 mb-8 flex-wrap">
        {/* N√∫t "T·∫•t c·∫£" */}
        <Button
          type={selectedBrand === "all" ? "primary" : "secondary"}
          onClick={() => setSelectedBrand("all")}
        >
          T·∫•t c·∫£
        </Button>

        {/* C√°c brand kh√°c */}
        {Object.keys(productsByBrand).map((brand) => (
          <Button
            key={brand}
            type={selectedBrand === brand ? "primary" : "secondary"}
            onClick={() => setSelectedBrand(brand)}
            className="capitalize" // Vi·∫øt hoa ch·ªØ c√°i ƒë·∫ßu
          >
            {brand}
          </Button>
        ))}
      </div>

      {/* Dropdown sort */}
      <SortOptions sortBy={sortBy} setSortBy={setSortBy} />

      {/* L∆∞·ªõi s·∫£n ph·∫©m */}
      <div className="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-6 px-6">
        {filteredProducts.slice(0, visibleCount).map((product) => (
          <CardProduct key={product.id} product={product} />
        ))}
      </div>

      {/* N√∫t "Xem th√™m" (ch·ªâ hi·ªán khi c√≤n s·∫£n ph·∫©m ch∆∞a hi·ªÉn th·ªã) */}
      {visibleCount < filteredProducts.length && (
        <div className="flex justify-center mt-8">
          <Button
            type="primary"
            onClick={() => setVisibleCount(visibleCount + 6)}
          >
            Xem th√™m
          </Button>
        </div>
      )}
    </section>
  );
}
